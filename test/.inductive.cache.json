{
  "/Users/erik/inductive.js/test/testSolves.i.js": {
    "fst": [
      "fst : (Number, Number) -> Number takes (Number)",
      "⌞ arg0 : Number"
    ],
    "snd": [
      "snd : (Number, Number) -> Number takes (Number)",
      "⌞ arg1 : Number"
    ],
    "square": [
      "square : Number -> Number takes (Number)",
      "⌞ * : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "voider": [
      "voider : Number -> undefined takes (undefined)",
      "⌞ void : undefined takes ('a)",
      "  ⌞ arg0 : Number"
    ],
    "isOdd": [
      "isOdd : Number -> Boolean takes (Boolean)",
      "⌞ ===Number : Boolean takes (Number, Number)",
      "  ⌞ 1 : Number",
      "  ⌞ % : Number takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ 2 : Number"
    ],
    "isXGreaterThanYSquared": [
      "isXGreaterThanYSquared : (Number, Number) -> Boolean takes (Boolean)",
      "⌞ Number> : Boolean takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ * : Number takes (Number, Number)",
      "    ⌞ arg1 : Number",
      "    ⌞ arg1 : Number"
    ],
    "isPositiveOrOdd": [
      "isPositiveOrOdd : Number -> Boolean takes (Boolean)",
      "⌞ || : Boolean takes (Boolean, Boolean)",
      "  ⌞ Number> : Boolean takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ 0 : Number",
      "  ⌞ Number> : Boolean takes (Number, Number)",
      "    ⌞ 0 : Number",
      "    ⌞ % : Number takes (Number, Number)",
      "      ⌞ arg0 : Number",
      "      ⌞ 2 : Number"
    ],
    "cond": [
      "cond : (Boolean, Number, Number) -> Number takes (Number)",
      "⌞ ?: : Number takes (Boolean, Number, Number)",
      "  ⌞ arg0 : Boolean",
      "  ⌞ arg1 : Number",
      "  ⌞ arg2 : Number"
    ],
    "dynamicEquals": [
      "dynamicEquals : (Number, Number, Boolean, Boolean) -> Boolean takes (Boolean)",
      "⌞ && : Boolean takes (Boolean, Boolean)",
      "  ⌞ ===Boolean : Boolean takes (Boolean, Boolean)",
      "    ⌞ arg3 : Boolean",
      "    ⌞ arg2 : Boolean",
      "  ⌞ ===Number : Boolean takes (Number, Number)",
      "    ⌞ arg1 : Number",
      "    ⌞ arg0 : Number"
    ],
    "returnUnion": [
      "returnUnion : (String | Number) -> (String | Number) takes ((String | Number))",
      "⌞ arg0 : (String | Number)"
    ],
    "add": [
      "add : Array<(String | Number)> -> Number takes (Number)",
      "⌞ Array.length : Number takes (Array<'a>)",
      "  ⌞ arg0 : Array<(String | Number)>"
    ],
    "matchAndDouble": [
      "matchAndDouble : (String | Number) -> (String | Number) takes ((String | Number))",
      "⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number))",
      "  ⌞ arg0 : (String | Number)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ refinement1 : String",
      "    ⌞ refinement1 : String",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ refinement1 : Number",
      "    ⌞ refinement1 : Number"
    ],
    "matchExplicitAndDouble": [
      "matchExplicitAndDouble : (String | Number) -> (String | Number) takes ((String | Number))",
      "⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number))",
      "  ⌞ arg0 : (String | Number)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ refinement1 : String",
      "    ⌞ refinement1 : String",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ refinement1 : Number",
      "    ⌞ refinement1 : Number"
    ],
    "matchArgAndDouble": [
      "matchArgAndDouble : (String | Number) -> (String | Number) takes ((String | Number))",
      "⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number)) #arg0",
      "  ⌞ arg0 : (String | Number)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ refinement1 : String",
      "    ⌞ refinement1 : String",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ refinement1 : Number",
      "    ⌞ refinement1 : Number"
    ],
    "matchArgsAndAdd": [
      "matchArgsAndAdd : ((String | Number), (String | Number)) -> (String | Number) takes ((String | Number))",
      "⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number)) #arg0",
      "  ⌞ arg0 : (String | Number)",
      "  ⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number)) #arg1",
      "    ⌞ arg1 : (String | Number)",
      "    ⌞ String+ : String takes (String, String)",
      "      ⌞ refinement2 : String",
      "      ⌞ refinement3 : String",
      "    ⌞ refinement3 : Number",
      "  ⌞ match : (String | Number) takes ((String | Number), (String | Number), (String | Number)) #arg1",
      "    ⌞ arg1 : (String | Number)",
      "    ⌞ refinement3 : String",
      "    ⌞ Number+ : Number takes (Number, Number)",
      "      ⌞ refinement3 : Number",
      "      ⌞ refinement2 : Number"
    ],
    "pair": [
      "pair : Number -> { Object a: Number, b: Number } takes ({ Object a: Number, b: Number })",
      "⌞ record : { Object a: Number, b: Number } takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "Test": [
      "Test : () -> { Test }"
    ],
    "nonObjectConstructor": [
      "nonObjectConstructor : Number -> { Test } takes ({ Test })",
      "⌞ new Test : { Test }"
    ],
    "memberAccess": [
      "memberAccess : { Object name: String } -> String takes (String)",
      "⌞ [\"name\"] : String takes ({ Object name: String })",
      "  ⌞ arg0 : { Object name: String }"
    ],
    "memberAccessExplicit": [
      "memberAccessExplicit : { Object name: String } -> String takes (String)",
      "⌞ [\"name\"] : String takes ({ Object name: String })",
      "  ⌞ arg0 : { Object name: String }"
    ],
    "memberAccessExplicitType": [
      "memberAccessExplicitType : { Object name: String } -> String takes (String)",
      "⌞ [\"name\"] : String takes ({ Object name: String })",
      "  ⌞ arg0 : { Object name: String }"
    ],
    "recordConstructor": [
      "recordConstructor : String -> { Object name: String } takes ({ Object name: String })",
      "⌞ record : { Object name: String } takes (String)",
      "  ⌞ arg0 : String"
    ],
    "nestedRecordConstructorUseAfter": [
      "nestedRecordConstructorUseAfter : String -> { Object name: (String | <Circular$0>) } takes ({ Object name: (String | <Circular$0>) })",
      "⌞ record : { Object name: (String | <Circular$0>) } takes ((String | { Object name: (String | <Circular$0>) }))",
      "  ⌞ record : { Object name: (String | <Circular$0>) } takes ((String | { Object name: (String | <Circular$0>) }))",
      "    ⌞ arg0 : String"
    ],
    "nestedRecordConstructorUseBefore": [
      "nestedRecordConstructorUseBefore : String -> { Object name: (String | <Circular$0>) } takes ({ Object name: (String | <Circular$0>) })",
      "⌞ record : { Object name: (String | <Circular$0>) } takes ((String | { Object name: (String | <Circular$0>) }))",
      "  ⌞ record : { Object name: (String | <Circular$0>) } takes ((String | { Object name: (String | <Circular$0>) }))",
      "    ⌞ arg0 : String"
    ],
    "recordMatchExplicit": [
      "recordMatchExplicit : (null | { Object name: String }) -> (String | null) takes ((String | null))",
      "⌞ match : (String | null) takes ((null | { Object name: String }), (String | null), (String | null))",
      "  ⌞ arg0 : (null | { Object name: String })",
      "  ⌞ refinement1 : null",
      "  ⌞ [\"name\"] : String takes ({ Object name: String })",
      "    ⌞ refinement1 : { Object name: String }"
    ],
    "recordUpdate": [
      "recordUpdate : { Object age: Number, first: String, last: String } -> { Object age: Number, first: String, last: String } takes ({ Object age: Number, first: String, last: String })",
      "⌞ set!{ last, age } : { Object age: Number, first: String, last: String } takes ({ Object age: Number, first: String, last: String }, Number, String)",
      "  ⌞ arg0 : { Object age: Number, first: String, last: String }",
      "  ⌞ 110 : Number",
      "  ⌞ \"super\" : String"
    ],
    "recordUpdateExplicitType": [
      "recordUpdateExplicitType : { Object age: Number, first: String, last: String } -> { Object age: Number, first: String, last: String } takes ({ Object age: Number, first: String, last: String })",
      "⌞ set!{ last, age } : { Object age: Number, first: String, last: String } takes ({ Object age: Number, first: String, last: String }, Number, String)",
      "  ⌞ arg0 : { Object age: Number, first: String, last: String }",
      "  ⌞ 110 : Number",
      "  ⌞ \"super\" : String"
    ],
    "arrayLength": [
      "arrayLength : Array<Number> -> Number takes (Number)",
      "⌞ Array.length : Number takes (Array<'a>)",
      "  ⌞ arg0 : Array<Number>"
    ],
    "arrayFilterEven": [
      "arrayFilterEven : Array<Number> -> Array<Number> takes (Array<Number>)",
      "⌞ Array.filter : Array<Number> takes (Array<Number>, Number -> Boolean)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : Number -> Boolean takes (Boolean)",
      "    ⌞ ===Number : Boolean takes (Number, Number)",
      "      ⌞ 0 : Number",
      "      ⌞ % : Number takes (Number, Number)",
      "        ⌞ arg1 : Number",
      "        ⌞ 2 : Number"
    ],
    "arrayMapSquare": [
      "arrayMapSquare : Array<Number> -> Array<Number> takes (Array<Number>)",
      "⌞ Array.map : Array<Number> takes (Array<'a>, 'a -> Number)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : Number -> Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ arg1 : Number"
    ],
    "arrayMapStringToNumber": [
      "arrayMapStringToNumber : Array<String> -> Array<Number> takes (Array<Number>)",
      "⌞ Array.map : Array<Number> takes (Array<'a>, 'a -> Number)",
      "  ⌞ arg0 : Array<String>",
      "  ⌞ fn : String -> Number takes (Number)",
      "    ⌞ String.length : Number takes (String)",
      "      ⌞ arg1 : String"
    ],
    "arrayMapSquareExplicitFunction": [
      "arrayMapSquareExplicitFunction : Array<Number> -> Array<Number> takes (Array<Number>)",
      "⌞ Array.map : Array<Number> takes (Array<'a>, 'a -> Number)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : Number -> Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ arg1 : Number"
    ],
    "arraySum": [
      "arraySum : Array<Number> -> Number takes (Number)",
      "⌞ Array.reduce2 : Number takes (Array<Number>, (Number, Number) -> Number)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : (Number, Number) -> Number takes (Number)",
      "    ⌞ Number+ : Number takes (Number, Number)",
      "      ⌞ arg2 : Number",
      "      ⌞ arg1 : Number"
    ],
    "basicMapAccess": [
      "basicMapAccess : (Map<Number>, String) -> (Number | undefined) takes ((Number | undefined))",
      "⌞ Map.get : (Number | undefined) takes (Map<Number>, String)",
      "  ⌞ arg0 : Map<Number>",
      "  ⌞ arg1 : String"
    ],
    "inMap": [
      "inMap : (Map<Number>, String) -> Boolean takes (Boolean)",
      "⌞ in : Boolean takes (Map<'a>, String)",
      "  ⌞ arg0 : Map<Number>",
      "  ⌞ arg1 : String"
    ],
    "unionMapAccess": [
      "unionMapAccess : (Map<(String | Number)>, String) -> (String | Number | undefined) takes ((String | Number | undefined))",
      "⌞ Map.get : (String | Number | undefined) takes (Map<(String | Number)>, String)",
      "  ⌞ arg0 : Map<(String | Number)>",
      "  ⌞ arg1 : String"
    ],
    "unionWithUndefinedMapAccess": [
      "unionWithUndefinedMapAccess : (Map<(Number | undefined)>, String) -> (Number | undefined) takes ((Number | undefined))",
      "⌞ OptionMap.get : (Number | undefined) takes (Map<(Number | undefined)>, String)",
      "  ⌞ arg0 : Map<(Number | undefined)>",
      "  ⌞ arg1 : String"
    ],
    "complexUnionWithUndefinedMapAccess": [
      "complexUnionWithUndefinedMapAccess : (Map<(String | Number | undefined)>, String) -> (String | Number | undefined) takes ((String | Number | undefined))",
      "⌞ OptionMap.get : (String | Number | undefined) takes (Map<(String | Number | undefined)>, String)",
      "  ⌞ arg0 : Map<(String | Number | undefined)>",
      "  ⌞ arg1 : String"
    ],
    "keyLength": [
      "keyLength : Map<Number> -> Number takes (Number)",
      "⌞ Array.length : Number takes (Array<'a>)",
      "  ⌞ Map.values : Array<'a> takes (Map<'a>)",
      "    ⌞ arg0 : Map<Number>"
    ],
    "constructMapFromArray": [
      "constructMapFromArray : Array<{ Object key: String }> -> Map<String> takes (Map<String>)",
      "⌞ ArrayToMap : Map<String> takes (Array<String>, String -> String)",
      "  ⌞ Array.map : Array<String> takes (Array<'a>, 'a -> String)",
      "    ⌞ arg0 : Array<{ Object key: String }>",
      "    ⌞ fn : { Object key: String } -> String takes (String)",
      "      ⌞ [\"key\"] : String takes ({ Object key: String })",
      "        ⌞ arg1 : { Object key: String }",
      "  ⌞ fn : String -> String takes (String)",
      "    ⌞ arg1 : String"
    ],
    "constructMapFromArrayAndIgnore": [
      "constructMapFromArrayAndIgnore : Array<{ Object key: String }> -> Map<String> takes (Map<String>)",
      "⌞ ArrayToMap : Map<String> takes (Array<String>, String -> String)",
      "  ⌞ Array.map : Array<String> takes (Array<'a>, 'a -> String)",
      "    ⌞ arg0 : Array<{ Object key: String }>",
      "    ⌞ fn : { Object key: String } -> String takes (String)",
      "      ⌞ [\"key\"] : String takes ({ Object key: String })",
      "        ⌞ arg1 : { Object key: String }",
      "  ⌞ fn : String -> String takes (String)",
      "    ⌞ arg1 : String"
    ],
    "constructMapFromRecord": [
      "constructMapFromRecord : { Object key: String } -> Map<String> takes (Map<String>)",
      "⌞ RecordToMap : Map<String> takes ('b)",
      "  ⌞ arg0 : { Object key: String }"
    ],
    "adder": [
      "adder : (Number, Number) -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg1 : Number",
      "  ⌞ arg0 : Number"
    ],
    "multiplier": [
      "multiplier : (Number, Number) -> Number takes (Number)",
      "⌞ * : Number takes (Number, Number)",
      "  ⌞ arg1 : Number",
      "  ⌞ arg0 : Number"
    ],
    "doubleIt": [
      "doubleIt : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "thunkSpec": [
      "thunkSpec : () -> Number takes (Number)",
      "⌞ 4 : Number"
    ],
    "thunkCall": [
      "thunkCall : () -> Number takes (Number)",
      "⌞ thunk : Number takes (() -> Number)",
      "  ⌞ fn : () -> Number takes (Number)",
      "    ⌞ 2 : Number"
    ],
    "thunkCallWithExplicitFunction": [
      "thunkCallWithExplicitFunction : () -> Number takes (Number)",
      "⌞ thunk : Number takes (() -> Number)",
      "  ⌞ fn : () -> Number takes (Number)",
      "    ⌞ 2 : Number"
    ],
    "caller": [
      "caller : (Number, Number -> Number) -> Number takes (Number)",
      "⌞ call : Number takes (Number -> Number, Number)",
      "  ⌞ arg1 : Number -> Number",
      "  ⌞ call : Number takes (Number -> Number, Number)",
      "    ⌞ arg1 : Number -> Number",
      "    ⌞ arg0 : Number"
    ],
    "callerExplicit": [
      "callerExplicit : (Number, Number -> Number) -> Number takes (Number)",
      "⌞ call : Number takes (Number -> Number, Number)",
      "  ⌞ arg1 : Number -> Number",
      "  ⌞ call : Number takes (Number -> Number, Number)",
      "    ⌞ arg1 : Number -> Number",
      "    ⌞ arg0 : Number"
    ],
    "return4": [
      "return4 : () -> Number takes (Number)",
      "⌞ 4 : Number"
    ],
    "specThunkCaller": [
      "specThunkCaller : () -> Number -> Number takes (Number)",
      "⌞ call : Number takes (() -> Number)",
      "  ⌞ arg0 : () -> Number"
    ],
    "specReturner": [
      "specReturner : () -> Number -> () -> Number takes (() -> Number)",
      "⌞ arg0 : () -> Number"
    ],
    "specThunkCallerExplicit": [
      "specThunkCallerExplicit : () -> Number -> Number takes (Number)",
      "⌞ call : Number takes (() -> Number)",
      "  ⌞ arg0 : () -> Number"
    ],
    "specArgCaller": [
      "specArgCaller : (Number, Number -> Number) -> Number takes (Number)",
      "⌞ call : Number takes (Number -> Number, Number)",
      "  ⌞ arg1 : Number -> Number",
      "  ⌞ call : Number takes (Number -> Number, Number)",
      "    ⌞ arg1 : Number -> Number",
      "    ⌞ arg0 : Number"
    ],
    "specArgCallerExplicit": [
      "specArgCallerExplicit : (Number, Number -> Number) -> Number takes (Number)",
      "⌞ call : Number takes (Number -> Number, Number)",
      "  ⌞ arg1 : Number -> Number",
      "  ⌞ call : Number takes (Number -> Number, Number)",
      "    ⌞ arg1 : Number -> Number",
      "    ⌞ arg0 : Number"
    ],
    "memberCaller": [
      "memberCaller : { Object a: Number, b: Number, c: () -> Number } -> Number takes (Number)",
      "⌞ [\"c\"]() : Number takes ({ Object a: Number, b: Number, c: () -> Number })",
      "  ⌞ arg0 : { Object a: Number, b: Number, c: () -> Number }"
    ],
    "memberCallerExplicit": [
      "memberCallerExplicit : { Object a: Number, b: Number, c: () -> Number } -> Number takes (Number)",
      "⌞ [\"c\"]() : Number takes ({ Object a: Number, b: Number, c: () -> Number })",
      "  ⌞ arg0 : { Object a: Number, b: Number, c: () -> Number }"
    ],
    "memberCallerExplicitType": [
      "memberCallerExplicitType : { Object a: Number, b: Number, c: () -> Number } -> Number takes (Number)",
      "⌞ [\"c\"]() : Number takes ({ Object a: Number, b: Number, c: () -> Number })",
      "  ⌞ arg0 : { Object a: Number, b: Number, c: () -> Number }"
    ],
    "callOverOne": [
      "callOverOne : (Number, Number -> Number) -> Number takes (Number)",
      "⌞ ?: : Number takes (Boolean, Number, Number)",
      "  ⌞ Number>= : Boolean takes (Number, Number)",
      "    ⌞ 1 : Number",
      "    ⌞ arg0 : Number",
      "  ⌞ 1 : Number",
      "  ⌞ call : Number takes (Number -> Number, Number)",
      "    ⌞ arg1 : Number -> Number",
      "    ⌞ arg0 : Number"
    ],
    "factorialWithExplicitFunction": [
      "factorialWithExplicitFunction : Number -> Number takes (Number)",
      "⌞ callOverOne.call : Number takes (Number, Number -> Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ fn : Number -> Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ call : Number takes (Number)",
      "        ⌞ -1 : Number takes (Number)",
      "          ⌞ arg1 : Number"
    ],
    "factorial": [
      "factorial : Number -> Number takes (Number)",
      "⌞ callOverOne.call : Number takes (Number, Number -> Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ fn : Number -> Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ call : Number takes (Number)",
      "        ⌞ -1 : Number takes (Number)",
      "          ⌞ arg1 : Number"
    ],
    "chainSpecs": [
      "chainSpecs : Number -> Number takes (Number)",
      "⌞ doubleIt.call : Number takes (Number)",
      "  ⌞ doubleIt.call : Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg0 : Number",
      "      ⌞ arg0 : Number"
    ],
    "deepChainSpecs": [
      "deepChainSpecs : Number -> Number takes (Number)",
      "⌞ +1 : Number takes (Number)",
      "  ⌞ chainSpecs.call : Number takes (Number)",
      "    ⌞ arg0 : Number"
    ],
    "listReverse": [
      "listReverse : (null | { Object head: Number, tail: (null | <Circular$0>) }) -> (null | { Object head: Number, tail: (null | <Circular$0>) }) takes ((null | { Object head: Number, tail: (null | <Circular$0>) }))",
      "⌞ match : (null | { Object head: Number, tail: (null | <Circular$0>) }) takes ((null | { Object head: Number, tail: (null | <Circular$0>) }), (null | { Object head: Number, tail: (null | <Circular$0>) }), (null | { Object head: Number, tail: (null | <Circular$0>) }))",
      "  ⌞ arg0 : (null | { Object head: Number, tail: (null | <Circular$0>) })",
      "  ⌞ arg1 : (null | { Object head: Number, tail: (null | <Circular$0>) })",
      "  ⌞ call : (null | { Object head: Number, tail: (null | <Circular$0>) }) takes ((null | { Object head: Number, tail: (null | <Circular$0>) }), (null | { Object head: Number, tail: (null | <Circular$0>) }))",
      "    ⌞ [\"tail\"] : (null | { Object head: Number, tail: (null | <Circular$0>) }) takes ({ Object head: Number, tail: (null | <Circular$0>) })",
      "      ⌞ refinement2 : { Object head: Number, tail: (null | <Circular$0>) }",
      "    ⌞ record : { Object head: Number, tail: (null | <Circular$0>) } takes (Number, (null | { Object head: Number, tail: (null | <Circular$0>) }))",
      "      ⌞ [\"head\"] : Number takes ({ Object head: Number, tail: (null | <Circular$0>) })",
      "        ⌞ refinement2 : { Object head: Number, tail: (null | <Circular$0>) }",
      "      ⌞ arg1 : (null | { Object head: Number, tail: (null | <Circular$0>) })"
    ],
    "lifecycle": [
      "lifecycle : Number -> Number takes (Number)",
      "⌞ * : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "satisfaction": [
      "satisfaction : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "curry2": [
      "curry2 : ((Number, Number) -> Number, Number) -> Number -> Number takes (Number -> Number)",
      "⌞ fn : Number -> Number takes (Number)",
      "  ⌞ call : Number takes ((Number, Number) -> Number, Number, Number)",
      "    ⌞ arg0 : (Number, Number) -> Number",
      "    ⌞ arg2 : Number",
      "    ⌞ arg1 : Number"
    ],
    "createError": [
      "createError : String -> { Error } takes ({ Error })",
      "⌞ new Error : { Error } takes (String)",
      "  ⌞ arg0 : String"
    ],
    "shouldThrow": [
      "shouldThrow : Number -> Number takes (Number)",
      "⌞ throw : Number takes (String)",
      "  ⌞ \"123\" : String"
    ],
    "returnUndefined": [
      "returnUndefined : () -> undefined takes (undefined)",
      "⌞ undefined : undefined"
    ],
    "returnGreaterThan": [
      "returnGreaterThan : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "returnNotLessThan": [
      "returnNotLessThan : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "returnApprox": [
      "returnApprox : Number -> Number takes (Number)",
      "⌞ arg0 : Number"
    ],
    "returnNot": [
      "returnNot : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ arg0 : Number"
    ],
    "satisfyNot": [
      "satisfyNot : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg0 : Number"
    ],
    "throwNot": [
      "throwNot : Number -> Number takes (Number)",
      "⌞ throw : Number takes (String)",
      "  ⌞ \"123\" : String"
    ],
    "genericFn": [
      "genericFn : 'a -> { Object lhs: 'a, rhs: 'a } takes ({ Object lhs: 'a, rhs: 'a })",
      "⌞ record : { Object lhs: 'a, rhs: 'a } takes ('a, 'a)",
      "  ⌞ arg0 : undefined",
      "  ⌞ arg0 : undefined"
    ],
    "mockConsoleLog": [
      "mockConsoleLog : () -> undefined takes (undefined)",
      "⌞ console.log : undefined takes ('a)",
      "  ⌞ \"# hello\" : String"
    ],
    "mockUndefined": [
      "mockUndefined : () -> undefined takes (undefined)",
      "⌞ console.log : undefined takes ('a)",
      "  ⌞ \"# hello\" : String"
    ],
    "mockLogTwice": [
      "mockLogTwice : () -> undefined takes (undefined)",
      "⌞ , : undefined takes ('a, undefined)",
      "  ⌞ console.log : undefined takes ('a)",
      "    ⌞ \"# hello\" : String",
      "  ⌞ console.log : undefined takes ('a)",
      "    ⌞ \"# goodbye\" : String"
    ],
    "mockGetTime": [
      "mockGetTime : () -> { Date } takes ({ Date })",
      "⌞ new Date : { Date }"
    ],
    "mockGetTimeWithMockEach": [
      "mockGetTimeWithMockEach : () -> { Date } takes ({ Date })",
      "⌞ new Date : { Date }"
    ],
    "mockAjaxGet": [
      "mockAjaxGet : String -> { Deferred } takes ({ Deferred })",
      "⌞ $.getString : { Deferred } takes (String, String -> undefined)",
      "  ⌞ arg0 : String",
      "  ⌞ fn : String -> undefined takes (undefined)",
      "    ⌞ console.logString : undefined takes (String)",
      "      ⌞ arg1 : String"
    ],
    "mockButtonClick": [
      "mockButtonClick : () -> undefined takes (undefined)",
      "⌞ onClick : undefined takes (String, event -> undefined)",
      "  ⌞ \"#btn\" : String",
      "  ⌞ fn : event -> undefined takes (undefined)",
      "    ⌞ console.logString : undefined takes (String)",
      "      ⌞ \"click\" : String"
    ],
    "mockAddCssClass": [
      "mockAddCssClass : (String, String) -> undefined takes (undefined)",
      "⌞ jQueryAddClass : undefined takes (String, String)",
      "  ⌞ arg0 : String",
      "  ⌞ arg1 : String"
    ],
    "mockLogFileContents": [
      "mockLogFileContents : String -> undefined takes (undefined)",
      "⌞ readFile : undefined takes (String, readFileCallback)",
      "  ⌞ arg0 : String",
      "  ⌞ readFileCallbackFn : readFileCallback takes (({ Error } | { Buffer }) -> undefined)",
      "    ⌞ fn : ({ Error } | { Buffer }) -> undefined takes (undefined)",
      "      ⌞ match : undefined takes (({ Error } | { Buffer }), undefined, undefined)",
      "        ⌞ arg1 : ({ Error } | { Buffer })",
      "        ⌞ throwError : undefined takes ({ Error })",
      "          ⌞ refinement2 : { Error }",
      "        ⌞ console.logString : undefined takes (String)",
      "          ⌞ bufferToString : String takes ({ Buffer })",
      "            ⌞ refinement2 : { Buffer }"
    ],
    "mockSpecs": [
      "mockSpecs : Number -> Number takes (Number)",
      "⌞ doubleIt.call : Number takes (Number)",
      "  ⌞ arg0 : Number"
    ],
    "mockBase": [
      "mockBase : (Number, Number) -> { mockBase a: Number } takes (Number)",
      "⌞ , : Number takes ('a, Number)",
      "  ⌞ console.log : undefined takes ('a)",
      "    ⌞ arg1 : Number",
      "  ⌞ arg0 : Number"
    ],
    "mockChild": [
      "mockChild : (Number, Number) -> { mockChild a: Number, b: Number } takes (Number, Number, Number, Number)",
      "⌞ arg1 : Number",
      "⌞ arg1 : Number",
      "⌞ arg0 : Number",
      "⌞ arg1 : Number"
    ],
    "specifyThis": [
      "specifyThis : { Object a: Number } => Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ [\"a\"] : Number takes ({ Object a: Number })",
      "    ⌞ arg1 : { Object a: Number }"
    ],
    "callThisSpec": [
      "callThisSpec : (Number, { Object a: Number }) -> Number takes (Number)",
      "⌞ specifyThis.call : Number takes ({ Object a: Number }, Number)",
      "  ⌞ arg1 : { Object a: Number }",
      "  ⌞ arg0 : Number"
    ],
    "mockThisSpec": [
      "mockThisSpec : ({ Object a: Number }, Number) -> Number takes (Number)",
      "⌞ specifyThis.call : Number takes ({ Object a: Number }, Number)",
      "  ⌞ arg0 : { Object a: Number }",
      "  ⌞ arg1 : Number"
    ],
    "callParamOnlyThisSpec": [
      "callParamOnlyThisSpec : (Number, { Object a: Number }, <Circular$0> => Number -> Number) -> Number takes (Number)",
      "⌞ call : Number takes ({ Object a: Number } => Number -> Number, { Object a: Number }, Number)",
      "  ⌞ arg2 : { Object a: Number } => Number -> Number",
      "  ⌞ arg1 : { Object a: Number }",
      "  ⌞ arg0 : Number"
    ],
    "thisMatchArgAndDouble": [
      "thisMatchArgAndDouble : { Object a: Number } => (String | Number) -> Number takes (Number)",
      "⌞ match : Number takes ((String | Number), Number, Number) #arg0",
      "  ⌞ arg0 : (String | Number)",
      "  ⌞ [\"a\"] : Number takes ({ Object a: Number })",
      "    ⌞ arg1 : { Object a: Number }",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ refinement2 : Number",
      "    ⌞ [\"a\"] : Number takes ({ Object a: Number })",
      "      ⌞ arg1 : { Object a: Number }"
    ],
    "memberThisCaller": [
      "memberThisCaller : { Object a: Number, b: Number, c: <Circular$0> => () -> Number } -> Number takes (Number)",
      "⌞ call : Number takes ({ Object a: Number, b: Number, c: <Circular$0> => () -> Number } => () -> Number, { Object a: Number, b: Number, c: <Circular$0> => () -> Number })",
      "  ⌞ [\"c\"] : { Object a: Number, b: Number, c: <Circular$0> => () -> Number } => () -> Number takes ({ Object a: Number, b: Number, c: <Circular$0> => () -> Number })",
      "    ⌞ arg0 : { Object a: Number, b: Number, c: <Circular$0> => () -> Number }",
      "  ⌞ arg0 : { Object a: Number, b: Number, c: <Circular$0> => () -> Number }"
    ],
    "memberThisCallerExplicit": [
      "memberThisCallerExplicit : { Object a: Number, b: Number, c: <Circular$0> => () -> Number } -> Number takes (Number)",
      "⌞ call : Number takes ({ Object a: Number, b: Number, c: <Circular$0> => () -> Number } => () -> Number, { Object a: Number, b: Number, c: <Circular$0> => () -> Number })",
      "  ⌞ [\"c\"] : { Object a: Number, b: Number, c: <Circular$0> => () -> Number } => () -> Number takes ({ Object a: Number, b: Number, c: <Circular$0> => () -> Number })",
      "    ⌞ arg0 : { Object a: Number, b: Number, c: <Circular$0> => () -> Number }",
      "  ⌞ arg0 : { Object a: Number, b: Number, c: <Circular$0> => () -> Number }"
    ],
    "arrayFilterEvenThis": [
      "arrayFilterEvenThis : Array<Number> => () -> Array<Number> takes (Array<Number>)",
      "⌞ Array.filter : Array<Number> takes (Array<Number>, Number -> Boolean)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : Number -> Boolean takes (Boolean)",
      "    ⌞ ===Number : Boolean takes (Number, Number)",
      "      ⌞ 0 : Number",
      "      ⌞ % : Number takes (Number, Number)",
      "        ⌞ arg1 : Number",
      "        ⌞ 2 : Number"
    ],
    "arrayFilterEvenThisExplicit": [
      "arrayFilterEvenThisExplicit : Array<Number> => () -> Array<Number> takes (Array<Number>)",
      "⌞ Array.filterThis : Array<Number> takes (Array<Number>, Array<Number> => Number -> Boolean)",
      "  ⌞ arg0 : Array<Number>",
      "  ⌞ fn : Array<Number> => Number -> Boolean takes (Boolean)",
      "    ⌞ ===Number : Boolean takes (Number, Number)",
      "      ⌞ 0 : Number",
      "      ⌞ % : Number takes (Number, Number)",
      "        ⌞ arg1 : Number",
      "        ⌞ 2 : Number"
    ],
    "fourFn": [
      "fourFn : () -> Number takes (Number)",
      "⌞ 4 : Number"
    ],
    "mockAssignment": [
      "mockAssignment : () -> Number takes (Number)",
      "⌞ four : Number"
    ],
    "mockEachAssignment": [
      "mockEachAssignment : () -> Number takes (Number)",
      "⌞ four : Number"
    ],
    "mockChainSpecFromAssignment": [
      "mockChainSpecFromAssignment : () -> Number takes (Number)",
      "⌞ mockAssignment.call : Number"
    ],
    "mockChainAssignmentFromAssignment": [
      "mockChainAssignmentFromAssignment : () -> Number takes (Number)",
      "⌞ anotherFour : Number"
    ],
    "double2": [
      "double2 : () -> Number takes (Number)",
      "⌞ doubleIt.call : Number takes (Number)",
      "  ⌞ 2 : Number"
    ],
    "mockDouble2Log": [
      "mockDouble2Log : () -> Number takes (Number)",
      "⌞ doubleIt.call : Number takes (Number)",
      "  ⌞ , : Number takes ('a, Number)",
      "    ⌞ console.log : undefined takes ('a)",
      "      ⌞ 2 : Number",
      "    ⌞ 2 : Number"
    ],
    "Person": [
      "Person : (String, String) -> { Person first: String, last: String } takes (String, String)",
      "⌞ arg0 : String",
      "⌞ arg1 : String"
    ],
    "Employee": [
      "Employee : (String, String, Number) -> { Employee first: String, last: String, pay: Number } takes (String, String, Number)",
      "⌞ arg0 : String",
      "⌞ arg1 : String",
      "⌞ arg2 : Number"
    ],
    "fullName": [
      "fullName : { Person first: String, last: String } => () -> String takes (String)",
      "⌞ String+ : String takes (String, String)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ [\"first\"] : String takes ({ Person first: String, last: String })",
      "      ⌞ arg0 : { Person first: String, last: String }",
      "    ⌞ \" \" : String",
      "  ⌞ [\"last\"] : String takes ({ Person first: String, last: String })",
      "    ⌞ arg0 : { Person first: String, last: String }"
    ],
    "FullyNamedPerson": [
      "FullyNamedPerson : { Person first: String, last: String } -> { FullyNamedPerson fullName: String } takes (String)",
      "⌞ String+ : String takes (String, String)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ [\"first\"] : String takes ({ Person first: String, last: String })",
      "      ⌞ arg0 : { Person first: String, last: String }",
      "    ⌞ \" \" : String",
      "  ⌞ [\"last\"] : String takes ({ Person first: String, last: String })",
      "    ⌞ arg0 : { Person first: String, last: String }"
    ],
    "newPerson": [
      "newPerson : (String, String) -> { Person first: String, last: String } takes ({ Person first: String, last: String })",
      "⌞ new Person : { Person first: String, last: String } takes (String, String)",
      "  ⌞ arg0 : String",
      "  ⌞ arg1 : String"
    ],
    "mockPersonWithCallback": [
      "mockPersonWithCallback : (String, String) -> { Person first: String, last: String } takes ({ Person first: String, last: String })",
      "⌞ new Person : { Person first: String, last: String } takes (String, String)",
      "  ⌞ arg1 : String",
      "  ⌞ arg1 : String"
    ],
    "mockPersonWithSpec": [
      "mockPersonWithSpec : (String, String) -> { Person first: String, last: String } takes ({ Person first: String, last: String })",
      "⌞ new Person : { Person first: String, last: String } takes (String, String)",
      "  ⌞ arg1 : String",
      "  ⌞ arg1 : String"
    ],
    "mockPerson": [
      "mockPerson : (String, String) -> { Person first: String, last: String } takes ({ Person first: String, last: String })",
      "⌞ new Person : { Person first: String, last: String } takes (String, String)",
      "  ⌞ arg1 : String",
      "  ⌞ arg1 : String"
    ],
    "simpleInheritance": [
      "simpleInheritance : (String, String, Number) -> { Person first: String, last: String } takes ({ Person first: String, last: String })",
      "⌞ new Employee : { Employee first: String, last: String, pay: Number } takes (String, String, Number)",
      "  ⌞ arg0 : String",
      "  ⌞ arg1 : String",
      "  ⌞ arg2 : Number"
    ],
    "mockConsoleLogNumber": [
      "mockConsoleLogNumber : Number -> undefined takes (undefined)",
      "⌞ console.log : undefined takes ('a)",
      "  ⌞ arg0 : Number"
    ],
    "mockChain": [
      "mockChain : Number -> undefined takes (undefined)",
      "⌞ mockConsoleLogNumber.call : undefined takes (Number)",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ arg0 : Number"
    ],
    "rangeSpec": [
      "rangeSpec : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ Array.reduce2 : Number takes (Array<Number>, (Number, Number) -> Number)",
      "    ⌞ range : Array<Number> takes (Number)",
      "      ⌞ arg0 : Number",
      "    ⌞ fn : (Number, Number) -> Number takes (Number)",
      "      ⌞ Number+ : Number takes (Number, Number)",
      "        ⌞ arg2 : Number",
      "        ⌞ arg1 : Number"
    ],
    "rangeOffsetSpec": [
      "rangeOffsetSpec : Number -> Number takes (Number)",
      "⌞ Array.tryReduce2 : Number takes (Array<Number>, (Number, Number) -> Number)",
      "  ⌞ rangeOffset : Array<Number> takes (Number, Number)",
      "    ⌞ 10 : Number",
      "    ⌞ arg0 : Number",
      "  ⌞ fn : (Number, Number) -> Number takes (Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ arg0 : Number"
    ],
    "nativeFnCtorInstantiated": [
      "nativeFnCtorInstantiated : { NativeCtorTestFn message: String } -> String takes (String)",
      "⌞ [\"message\"] : String takes ({ NativeCtorTestFn message: String })",
      "  ⌞ arg0 : { NativeCtorTestFn message: String }"
    ],
    "nativeFnCtorNew": [
      "nativeFnCtorNew : { CtorFn message: String } -> String takes (String)",
      "⌞ [\"message\"] : String takes ({ CtorFn message: String })",
      "  ⌞ arg0 : { CtorFn message: String }"
    ],
    "nativeStringCtor": [
      "nativeStringCtor : { NativeCtorTestString message: String } -> String takes (String)",
      "⌞ [\"message\"] : String takes ({ NativeCtorTestString message: String })",
      "  ⌞ arg0 : { NativeCtorTestString message: String }"
    ],
    "nativeExpressionWithRequirementsCaller": [
      "nativeExpressionWithRequirementsCaller : (Number, Number) -> Number takes (Number)",
      "⌞ nativeSubtract : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg1 : Number"
    ],
    "nativeConstructorWithRequirementsCaller": [
      "nativeConstructorWithRequirementsCaller : Number -> { age: Number } takes ({ age: Number })",
      "⌞ nativeConstruct : { age: Number } takes (Number)",
      "  ⌞ arg0 : Number"
    ],
    "celsiusNumberToFarenheitNumber": [
      "celsiusNumberToFarenheitNumber : Number -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ 32 : Number",
      "  ⌞ * : Number takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ 1.8 : Number"
    ],
    "celsiusToFarenheit": [
      "celsiusToFarenheit : celsius -> farenheit takes (farenheit)",
      "⌞ farenheit to Number : farenheit takes (Number)",
      "  ⌞ celsiusNumberToFarenheitNumber.call : Number takes (Number)",
      "    ⌞ Number to celsius : Number takes (celsius)",
      "      ⌞ arg0 : celsius"
    ],
    "farenheitNumberToCelsiusNumber": [
      "farenheitNumberToCelsiusNumber : Number -> Number takes (Number)",
      "⌞ * : Number takes (Number, Number)",
      "  ⌞ 0.5555555555555556 : Number",
      "  ⌞ - : Number takes (Number, Number)",
      "    ⌞ arg0 : Number",
      "    ⌞ 32 : Number"
    ],
    "farenheitToCelsius": [
      "farenheitToCelsius : farenheit -> celsius takes (celsius)",
      "⌞ celsius to Number : celsius takes (Number)",
      "  ⌞ farenheitNumberToCelsiusNumber.call : Number takes (Number)",
      "    ⌞ Number to farenheit : Number takes (farenheit)",
      "      ⌞ arg0 : farenheit"
    ],
    "getCelsiusConstant": [
      "getCelsiusConstant : () -> celsius takes (celsius)",
      "⌞ celsius33 : celsius"
    ],
    "recursiveTemperatureRecord": [
      "recursiveTemperatureRecord : { Object head: farenheit, tail: (null | <Circular$0>) } -> farenheit takes (farenheit)",
      "⌞ [\"head\"] : farenheit takes ({ Object head: farenheit, tail: (null | <Circular$0>) })",
      "  ⌞ arg0 : { Object head: farenheit, tail: (null | <Circular$0>) }"
    ],
    "recordCompat1": [
      "recordCompat1 : () -> { Object a: Number } takes ({ Object a: Number })",
      "⌞ record : { Object a: Number } takes (Number)",
      "  ⌞ 1 : Number"
    ],
    "recordCompat2": [
      "recordCompat2 : () -> { Object a: Number } takes ({ Object a: Number })",
      "⌞ recordCompat1.call : { Object a: Number }"
    ],
    "hypotenuse": [
      "hypotenuse : (Number, Number) -> Number takes (Number)",
      "⌞ Math.sqrt : Number takes (Number)",
      "  ⌞ Number+ : Number takes (Number, Number)",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg1 : Number",
      "      ⌞ arg1 : Number",
      "    ⌞ * : Number takes (Number, Number)",
      "      ⌞ arg0 : Number",
      "      ⌞ arg0 : Number"
    ]
  },
  "/Users/erik/inductive.js/test/project-actual/chainedDependency.i.js": {
    "subtract": [
      "subtract : (Number, Number) -> Number takes (Number)",
      "⌞ - : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg1 : Number"
    ],
    "calcHundred": [
      "calcHundred : () -> Number takes (Number)",
      "⌞ subtract.call : Number takes (Number, Number)",
      "  ⌞ 150 : Number",
      "  ⌞ 50 : Number"
    ]
  },
  "/Users/erik/inductive.js/test/project-actual/siblingComponent.i.js": {
    "sum": [
      "sum : (Number, Number) -> Number takes (Number)",
      "⌞ Number+ : Number takes (Number, Number)",
      "  ⌞ arg1 : Number",
      "  ⌞ arg0 : Number"
    ],
    "subtract5": [
      "subtract5 : Number -> Number takes (Number)",
      "⌞ subtract.call : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ 5 : Number"
    ],
    "ninetyFive": [
      "ninetyFive : () -> Number takes (Number)",
      "⌞ subtract5.call : Number takes (Number)",
      "  ⌞ hundred : Number"
    ]
  },
  "/Users/erik/inductive.js/test/project-actual/lib/childSiblingComponent.i.js": {
    "modulo": [
      "modulo : (Number, Number) -> Number takes (Number)",
      "⌞ % : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg1 : Number"
    ]
  },
  "/Users/erik/inductive.js/test/project-actual/lib/childComponent.i.js": {
    "xFn": [
      "xFn : () -> Number takes (Number)",
      "⌞ 555 : Number"
    ],
    "Human": [
      "Human : (String, String) -> { Human first: String, last: String } takes (String, String)",
      "⌞ arg0 : String",
      "⌞ arg1 : String"
    ],
    "fullName": [
      "fullName : { Human first: String, last: String } => () -> String takes (String)",
      "⌞ String+ : String takes (String, String)",
      "  ⌞ String+ : String takes (String, String)",
      "    ⌞ [\"first\"] : String takes ({ Human first: String, last: String })",
      "      ⌞ arg0 : { Human first: String, last: String }",
      "    ⌞ \" \" : String",
      "  ⌞ [\"last\"] : String takes ({ Human first: String, last: String })",
      "    ⌞ arg0 : { Human first: String, last: String }"
    ],
    "President": [
      "President : (String, String, Number) -> { President first: String, last: String, pay: Number } takes (String, String, Number)",
      "⌞ arg0 : String",
      "⌞ arg1 : String",
      "⌞ arg2 : Number"
    ],
    "callNativeSubtract": [
      "callNativeSubtract : (Number, Number) -> Number takes (Number)",
      "⌞ nativeSubtract : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg1 : Number"
    ],
    "moduloMinusOne": [
      "moduloMinusOne : (Number, Number) -> Number takes (Number)",
      "⌞ modulo.call : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ -1 : Number takes (Number)",
      "    ⌞ arg1 : Number"
    ]
  },
  "/Users/erik/inductive.js/test/project-actual/main.i.js": {
    "hello": [
      "hello : () -> undefined takes (undefined)",
      "⌞ console.log : undefined takes ('a)",
      "  ⌞ \"hello\" : String"
    ],
    "getX": [
      "getX : () -> Number takes (Number)",
      "⌞ x : Number"
    ],
    "squareRootSum": [
      "squareRootSum : (Number, Number) -> Number takes (Number)",
      "⌞ Math.sqrt : Number takes (Number)",
      "  ⌞ sum.call : Number takes (Number, Number)",
      "    ⌞ arg1 : Number",
      "    ⌞ arg0 : Number"
    ],
    "squareXMinus5": [
      "squareXMinus5 : Number -> Number takes (Number)",
      "⌞ * : Number takes (Number, Number)",
      "  ⌞ subtract5.call : Number takes (Number)",
      "    ⌞ arg0 : Number",
      "  ⌞ subtract5.call : Number takes (Number)",
      "    ⌞ arg0 : Number"
    ],
    "nativeSubtracter": [
      "nativeSubtracter : (Number, Number) -> Number takes (Number)",
      "⌞ nativeChild : Number takes (Number, Number)",
      "  ⌞ arg0 : Number",
      "  ⌞ arg1 : Number"
    ],
    "nativeCtorFactory": [
      "nativeCtorFactory : Number -> { NativeCtor x: Number, y: String } takes ({ NativeCtor x: Number, y: String })",
      "⌞ new NativeCtor : { NativeCtor x: Number, y: String } takes (Number)",
      "  ⌞ arg0 : Number"
    ],
    "referenceAliasedAssignment": [
      "referenceAliasedAssignment : () -> Number takes (Number)",
      "⌞ hundredAlias : Number"
    ],
    "ioDef": [
      "ioDef : () -> undefined takes (undefined)",
      "⌞ console.log : undefined takes ('a)",
      "  ⌞ 2 : Number"
    ]
  }
}